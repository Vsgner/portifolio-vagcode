!(function (window, document) {
    var serializer,
      parser,
      createElement = "createElement",
      getElementsByTagName = "getElementsByTagName",
      length = "length",
      style = "style",
      title = "title",
      undefinedType = "undefined",
      setAttribute = "setAttribute",
      getAttribute = "getAttribute",
      nullValue = null,
      svgInjectAttr = "__svgInject",
      injectPrefix = "--inject-",
      injectRegex = new RegExp(injectPrefix + "\\d+", "g"),
      loadFail = "LOAD_FAIL",
      svgNotSupported = "SVG_NOT_SUPPORTED",
      svgInvalid = "SVG_INVALID",
      attributesToCopy = ["src", "alt", "onload", "onerror"],
      testAnchor = document[createElement]("a"),
      svgSupported = typeof SVGRect != undefinedType,
      defaultOptions = { useCache: true, copyAttributes: true, makeIdsUnique: true },
      idAttributes = {
        clipPath: ["clip-path"],
        "color-profile": nullValue,
        cursor: nullValue,
        filter: nullValue,
        linearGradient: ["fill", "stroke"],
        marker: ["marker", "marker-end", "marker-mid", "marker-start"],
        mask: nullValue,
        pattern: ["fill", "stroke"],
        radialGradient: ["fill", "stroke"],
      },
      injectedFlag = 1,
      injectedComplete = 2,
      uniqueIdCounter = 1;
  
    function serializeSVG(svgElement) {
      return (serializer = serializer || new XMLSerializer()).serializeToString(svgElement);
    }
  
    function makeIdsUnique(svgElement, isCacheable) {
      var uniqueIdSuffix = injectPrefix + uniqueIdCounter++,
        urlRegex = /url\("?#([a-zA-Z][\w:.-]*)"?\)/g,
        elementsWithIds = svgElement.querySelectorAll("[id]"),
        cache = isCacheable ? [] : nullValue,
        modified = false;
  
      // Check for elements with IDs
      if (elementsWithIds[length]) {
        elementsWithIds.forEach((el) => {
          el.id += uniqueIdSuffix;
          modified = true;
        });
      }
  
      // Modify URL references in <style> and attributes
      svgElement[getElementsByTagName]("*").forEach((el) => {
        if (el.localName === style) {
          // Replace URL references in styles
          el.textContent = el.textContent.replace(urlRegex, function (_, id) {
            cache && (cache[id] = 1);
            return `url(#${id}${uniqueIdSuffix})`;
          });
        }
      });
  
      return modified;
    }
  
    function injectSVG(imageElement, svgElement, sourceUrl, options) {
      if (svgElement) {
        svgElement[setAttribute]("data-inject-url", sourceUrl);
  
        var parentNode = imageElement.parentNode;
        if (parentNode) {
          // Copy attributes if specified
          if (options.copyAttributes) {
            Array.from(imageElement.attributes).forEach(({ name, value }) => {
              if (!attributesToCopy.includes(name)) {
                svgElement[setAttribute](name, value);
              }
            });
          }
  
          // Replace image with SVG
          parentNode.replaceChild(svgElement, imageElement);
          imageElement[svgInjectAttr] = injectedFlag;
  
          // Run callback if defined
          options.afterInject && options.afterInject(imageElement, svgElement);
        }
      } else {
        handleError(imageElement, svgInvalid, options);
      }
    }
  
    function handleError(imageElement, errorType, options) {
      imageElement[svgInjectAttr] = injectedComplete;
      options.onFail && options.onFail(imageElement, errorType);
    }
  
    function injectImage(imageElement, options, callback) {
      var src = imageElement[getAttribute]("src");
      if (!src) return handleError(imageElement, loadFail, options);
  
      var cacheEnabled = options.useCache;
      var makeIdsUnique = options.makeIdsUnique;
  
      // Make a request for the SVG
      fetch(src)
        .then((response) => response.text())
        .then((svgText) => {
          var svgElement = new DOMParser().parseFromString(svgText, "image/svg+xml").documentElement;
          if (makeIdsUnique) makeIdsUnique(svgElement, false);
          injectSVG(imageElement, svgElement, src, options);
          callback && callback();
        })
        .catch(() => handleError(imageElement, loadFail, options));
    }
  
    function SVGInject() {
      // Main function
    }
  
    window.SVGInject = SVGInject;
  })(window, document);
  